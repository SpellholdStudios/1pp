/* ================================================================================================================================================================================== *
 *  v 4.2.0                                                                                                                                                                           *
 *                                               C O M P O N E N T   :   S m a r t   A v a t a r   &   A r m o u r   S w i t c h i n g                                                *
 *                                                                                                                                                                                    *
 * ================================================================================================================================================================================== *
 *  This component allows armour and robes to properly show up for characters of any class when equipped.                                                                             *
 * ================================================================================================================================================================================== *
 *  change-log:                                                                                                                                                                       *
 *  -----------                                                                                                                                                                       *
 *      - Coding simplification:                                                                                                                                                      *
 *          Replaced `GAME_IS` conditions with variables checks to speed up install time.                                                                                             *
 *          Copied entire folders instead of infinite lines (COPY ~1pp/folder/file.ext~ ~override~ or ACTION_FOR_EACH file IN list BEGIN COPY ~1pp/folder/file.ext~ ~override~ END).  *
 *          Used newer and more efficient `ADD_ITEM_EQEFFECT` WeiDU function to replace so many lines of codes.                                                                       *
 * ================================================================================================================================================================================== */

// -------------------------------- //
//  GAME                      line  //
// -------------------------------- //
//  BG2-ToB                 #   25  //
//  IWD                     #   78  //
//  IWD2                    #  212  //
// -------------------------------- //

/* ========= *
 *  BG2-ToB  *
 * ========= */

ACTION_IF (is_bg2 OR is_tob OR is_tutu) BEGIN // GAME_IS ~bg2 tob tutu tutu_totsc ca~

	PRINT @113000 // ~BGII detected.~
	PRINT @113001 // ~Installing : Improved Improved Galactygon's Avatar Switching.~
	PRINT @113002 // ~Installing avatar switching code and files.~
	SILENT

	EXTEND_TOP ~baldur.bcs~ ~1pp/core/1pp_thieves_galore/patches/script/script.baf~
	EXTEND_TOP ~baldur25.bcs~ ~1pp/core/1pp_thieves_galore/patches/script/script.baf~

// the following built on and mostly copied from the BGII Tweak Pack component
// http://www.gibberlings3.net/bg2tweaks/

	OUTER_SPRINT file-exc ~propc101.eff ~
	ACTION_BASH_FOR ~1pp/core/1pp_thieves_galore/patches/switch/~ ~^.+$~ BEGIN
		ACTION_TO_LOWER %BASH_FOR_FILE%
		ACTION_TO_LOWER %BASH_FOR_RES%
		ACTION_IF (~%file-exc%~ STRING_CONTAINS_REGEXP ~%BASH_FOR_FILE%~ = 1) BEGIN
			COPY ~%BASH_FOR_FILESPEC%~ ~override/%BASH_FOR_FILE%~
			ACTION_IF FILE_EXISTS_IN_GAME ~%BASH_FOR_RES%.plt~ BEGIN
				COPY ~1pp/core/ilove.plt~ ~override/%BASH_FOR_RES%.plt~
			END
		END
	END

	ACTION_IF (FILE_EXISTS_IN_GAME ~propc101.eff~) BEGIN
	END ELSE BEGIN
		COPY ~1pp/core/1pp_thieves_galore/patches/switch/propc101.eff~ ~override~
	END

	PRINT @113003 // ~Patching armour and robes (BGII style).~
	SILENT
	COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
		READ_SHORT 0x1c "itemtype" ELSE 0
		PATCH_IF (itemtype = 2) AND ("%SOURCE_RES%" STRING_COMPARE_CASE ~PLAT98~) BEGIN
			READ_ASCII 0x22 "anim" (2)
			PATCH_IF (("%anim%" STRING_COMPARE_CASE "2w" = 0) OR
					  ("%anim%" STRING_COMPARE_CASE "3w" = 0) OR
					  ("%anim%" STRING_COMPARE_CASE "4w" = 0)) BEGIN // if robe
				LPF ADD_ITEM_EQEFFECT INT_VAR insert_point = "-1" opcode = 146 target = 1 timing = 2 parameter1 = 1 parameter2 = 1 STR_VAR resource = lcrobe END	// robe spell effect
			END ELSE BEGIN
				LPF ADD_ITEM_EQEFFECT INT_VAR insert_point = "-1" opcode = 146 target = 1 timing = 2 parameter1 = 1 parameter2 = 1 STR_VAR resource = lcarmor END	// armor spell effect
			END
		END
	BUT_ONLY

END // of ACTION_IF (GAME_IS ~bg2 tob tutu tutu_totsc ca~)


/* ===== *
 *  IWD  *
 * ===== */

ACTION_IF (is_iwd) BEGIN // GAME_IS ~totlm how~

	PRINT @113004 // ~IWD HoW/TotLM detected.~
	PRINT @113005 // ~Installing: IWD Avatar Switching.~
	PRINT @113006 // ~Installing avatar switching files.~
	SILENT

	COPY ~1pp/core/1pp_thieves_galore/patches/iwd_switch~ ~override~

	PRINT @113007 // ~Patching armour and robes (IWD style).~
	SILENT

	COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
		READ_SHORT 0x1c "itemtype" ELSE 0
		PATCH_IF ("%itemtype%" = 2) BEGIN
			READ_ASCII 0x22 "anim" (2)
			PATCH_IF (("%anim%" STRING_COMPARE_CASE "2w" = 0) OR
					  ("%anim%" STRING_COMPARE_CASE "3w" = 0) OR
					  ("%anim%" STRING_COMPARE_CASE "4w" = 0)) BEGIN // if robe
				SPRINT "resource" "lirobe"	// resource
				SPRINT "icon" "licng1" 		// resource
			END ELSE BEGIN
				SPRINT "resource" "liarmor"	// resource
				SPRINT "icon" "licng0"		// resource
			END

			PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
				READ_LONG 0x64 ~abil_loc~
				READ_SHORT 0x68 ~abil_num~
				READ_SHORT 0x6A ~fx_loc~

				// generate real eff number
				SET overhead = (%SOURCE_SIZE% - %fx_loc%)
				SET entfx_num = (overhead / 0x30)

				READ_SHORT 0x70 ~fx_num~
				SET abil_size = ((%fx_loc% - %abil_loc%) / %abil_num%)
				SET new_bytes = (%fx_loc%)
				SET new_abil_loc = %new_bytes%
				SET new_fx_loc = (%new_abil_loc% + 0x38)
				INSERT_BYTES %new_bytes% 0x38
				WRITE_SHORT 104 (%abil_num% + 1)
				WRITE_LONG  106 (%new_fx_loc%)
				WRITE_BYTE  (%new_abil_loc% + 0) 0				// attack type
				WRITE_BYTE  (%new_abil_loc% + 2) 3				// use location
				WRITE_ASCIIE (%new_abil_loc% + 4) ~%icon%~		// use icon
				WRITE_BYTE  (%new_abil_loc% + 12) 5				// type of target
				WRITE_BYTE  (%new_abil_loc% + 14) 1				// Range
				WRITE_SHORT (%new_abil_loc% + 18) 0				// speed
				WRITE_SHORT (%new_abil_loc% + 22) 6				// dice sides
				WRITE_SHORT (%new_abil_loc% + 24) 0				// dice rolls
				WRITE_SHORT (%new_abil_loc% + 28) 1				// damage type
				WRITE_SHORT (%new_abil_loc% + 36) 1				// charge removal
				WRITE_LONG  (%new_abil_loc% + 38) 0				// flag: use strength
				WRITE_SHORT (%new_abil_loc% + 42) 1				// Projectile Type
				WRITE_SHORT (%new_abil_loc% + 44) 34			// overh
				WRITE_SHORT (%new_abil_loc% + 46) 33			// backhand
				WRITE_SHORT (%new_abil_loc% + 48) 33			// thrust
				WRITE_SHORT (%new_abil_loc% + 30) 3				// # of effects
				WRITE_SHORT (%new_abil_loc% + 32) %entfx_num%	// Effect index

				SET addeffectone = (%SOURCE_SIZE% + 0x38)
				SET addeffecttwo = (%SOURCE_SIZE% + 0x30 + 0x38)
				SET addeffectthree = (%SOURCE_SIZE% + 0x60 + 0x38)

				// CAST SPELL
				SET new_abil_loc = addeffectone
				INSERT_BYTES %addeffectone% 0x30
				WRITE_SHORT (%new_abil_loc% + 0x00) 146				// opcode
				WRITE_BYTE  (%new_abil_loc% + 0x02) 1				// target
				WRITE_BYTE  (%new_abil_loc% + 0x03) 0				// power
				WRITE_LONG  (%new_abil_loc% + 0x04) 1				// cast at level
				WRITE_LONG  (%new_abil_loc% + 0x08) 1				// cast instantly
				WRITE_BYTE  (%new_abil_loc% + 0x0C) 2				// timing mode
				WRITE_BYTE  (%new_abil_loc% + 0x0D) 0				// dispel/resist
				WRITE_LONG  (%new_abil_loc% + 0x0E) 0				// duration
				WRITE_BYTE  (%new_abil_loc% + 0x12) 100				// probability 1
				WRITE_BYTE  (%new_abil_loc% + 0x13) 0				// probability 2
				WRITE_ASCIIE (%new_abil_loc% + 0x14) ~%resource%~	// resource
				WRITE_LONG  (%new_abil_loc% + 0x1C) 0				// #dice/maxlevel
				WRITE_LONG  (%new_abil_loc% + 0x20) 0				// dicesize/minlevel
				WRITE_LONG  (%new_abil_loc% + 0x24) 0				// savetype
				WRITE_LONG  (%new_abil_loc% + 0x28) 0				// savebogus

				//REMOVE SPELL
				SET new_abil_loc = addeffecttwo
				INSERT_BYTES %addeffecttwo% 0x30
				WRITE_SHORT (%new_abil_loc% + 0x00) 172			// opcode
				WRITE_BYTE  (%new_abil_loc% + 0x02) 1			// target
				WRITE_BYTE  (%new_abil_loc% + 0x03) 0			// power
				WRITE_LONG  (%new_abil_loc% + 0x04) 0			// cast at level
				WRITE_LONG  (%new_abil_loc% + 0x08) 0 			// cast instantly
				WRITE_BYTE  (%new_abil_loc% + 0x0C) 1			// timing mode
				WRITE_BYTE  (%new_abil_loc% + 0x0D) 0			// dispel/resist
				WRITE_LONG  (%new_abil_loc% + 0x0E) 0			// duration
				WRITE_BYTE  (%new_abil_loc% + 0x12) 100			// probability 1
				WRITE_BYTE  (%new_abil_loc% + 0x13) 0			// probability 2
				WRITE_ASCIIE (%new_abil_loc% + 0x14) ~liuarm3~	// resource
				WRITE_LONG  (%new_abil_loc% + 0x1C) 0			// #dice/maxlevel
				WRITE_LONG  (%new_abil_loc% + 0x20) 0 			// dicesize/minlevel
				WRITE_LONG  (%new_abil_loc% + 0x24) 0			// savetype
				WRITE_LONG  (%new_abil_loc% + 0x28) 0 			// savebogus

				// GIVE INNATE (switch)
				SET new_abil_loc = addeffectthree
				INSERT_BYTES %addeffectthree% 0x30
				WRITE_SHORT (%new_abil_loc% + 0x00) 171			// opcode
				WRITE_BYTE  (%new_abil_loc% + 0x02) 1			// target
				WRITE_BYTE  (%new_abil_loc% + 0x03) 0			// power
				WRITE_LONG  (%new_abil_loc% + 0x04) 0			// cast at level
				WRITE_LONG  (%new_abil_loc% + 0x08) 0			// cast instantly
				WRITE_BYTE  (%new_abil_loc% + 0x0C) 1			// timing mode
				WRITE_BYTE  (%new_abil_loc% + 0x0D) 0 			// dispel/resist
				WRITE_LONG  (%new_abil_loc% + 0x0E) 0			// duration
				WRITE_BYTE  (%new_abil_loc% + 0x12) 100			// probability 1
				WRITE_BYTE  (%new_abil_loc% + 0x13) 0			// probability 2
				WRITE_ASCIIE (%new_abil_loc% + 0x14) ~liuarm3~	// resource
				WRITE_LONG  (%new_abil_loc% + 0x1C) 0			// #dice/maxlevel
				WRITE_LONG  (%new_abil_loc% + 0x20) 0			// dicesize/minlevel
				WRITE_LONG  (%new_abil_loc% + 0x24) 0			// savetype
				WRITE_LONG  (%new_abil_loc% + 0x28) 0			// savebogus

			END

		END
	BUT_ONLY

END // of ACTION_IF (GAME_IS ~totlm how~)


/* ====== *
 *  IWD2  *
 * ====== */

ACTION_IF (is_iwd2) BEGIN // GAME_IS ~iwd2~

	PRINT @113008 // ~IWDII detected.~
	PRINT @113009 // ~Installing: IWDII Avatar Switching.~
	PRINT @113006 // ~Installing avatar switching files.~
	SILENT

	OUTER_SPRINT file-exc ~listinnt.2da ~
	ACTION_BASH_FOR ~1pp/core/1pp_thieves_galore/patches/iwd2_switch/~ ~^.+$~ BEGIN
		ACTION_TO_LOWER %BASH_FOR_FILE%
		ACTION_IF (~%file-exc%~ STRING_CONTAINS_REGEXP ~%BASH_FOR_FILE%~ = 1) BEGIN
			COPY ~%BASH_FOR_FILESPEC%~ ~override/%BASH_FOR_FILE%~
		END
	END

	PRINT @113010 // ~Copying .2da~
	SILENT
	COPY ~1pp/core/1pp_thieves_galore/patches/iwd2_switch/listinnt.2da~ ~override~

	PRINT @113011 // ~Patching armour and robes (IWDII style).~
	SILENT
	COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
		READ_ASCII 0x22 "anim" (2)
		PATCH_IF (("%anim%" STRING_COMPARE_CASE "2a" = 0) OR
				  ("%anim%" STRING_COMPARE_CASE "3a" = 0) OR
				  ("%anim%" STRING_COMPARE_CASE "4a" = 0) OR
				  ("%anim%" STRING_COMPARE_CASE "2w" = 0) OR
				  ("%anim%" STRING_COMPARE_CASE "3w" = 0) OR
				  ("%anim%" STRING_COMPARE_CASE "4w" = 0)) BEGIN
			PATCH_IF (("%anim%" STRING_COMPARE_CASE "2w" = 0) OR
					  ("%anim%" STRING_COMPARE_CASE "3w" = 0) OR
					  ("%anim%" STRING_COMPARE_CASE "4w" = 0)) BEGIN // if robe
				LPF ADD_ITEM_EQEFFECT INT_VAR insert_point = "-1" opcode = 146 target = 1 timing = 2 parameter1 = 1 parameter2 = 1 STR_VAR resource = l2crobe END	// robe spell effect
			END ELSE BEGIN
				LPF ADD_ITEM_EQEFFECT INT_VAR insert_point = "-1" opcode = 146 target = 1 timing = 2 parameter1 = 1 parameter2 = 1 STR_VAR resource = l2carmor END	// armor spell effect
			END
		END
	BUT_ONLY

END // of ACTION_IF (GAME_IS ~iwd2~)

// END of COMPONENT